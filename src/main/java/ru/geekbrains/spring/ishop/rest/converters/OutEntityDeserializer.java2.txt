package ru.geekbrains.spring.ishop.rest.deserializers;

import com.google.gson.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import ru.geekbrains.spring.ishop.entity.AbstractEntity;
import ru.geekbrains.spring.ishop.entity.Event;
import ru.geekbrains.spring.ishop.rest.outentities.OutEntity;
import ru.geekbrains.spring.ishop.utils.EntityTypes;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

@Component
@Slf4j
public class OutEntityDeserializer implements JsonDeserializer<OutEntity> {
//    @Override
//    public OutEntity deserialize(JsonElement json, Type typeOfT,
//                                 JsonDeserializationContext context) throws JsonParseException
//    {
//        OutEntity outEntity = null;
//        JsonObject jsonObject = json.getAsJsonObject();
//        if(jsonObject.get(OutEntity.Fields.entityFields.name()) != null) {
//            Set<Map.Entry<String, JsonElement>> fieldsSet = jsonObject.get(OutEntity.Fields.entityFields.name()).getAsJsonObject().entrySet();
//            Map<String, Object> entityFields = new HashMap<>();
//            for (Map.Entry<String, JsonElement> jE: fieldsSet) {
//                Object objectInternal;
//                if(jE.getValue() instanceof JsonObject &&
//                        jE.getValue().getAsJsonObject().get(OutEntity.Fields.entityFields.name()) != null) {
//                    objectInternal = recognizeOutEntity(jE.getValue().toString());
//                } else {
//                    objectInternal = recognizeObject(jE.getValue());
//                }
//                entityFields.put(jE.getKey(), objectInternal);
//            }
//            outEntity = OutEntity.builder()
//                    .entityType(jsonObject.get(OutEntity.Fields.entityType.name()).getAsString())
//                    .entityFields(entityFields)
//                    .build();
//        }
//        //TODO Replace RuntimeException with OutEntityDeserializeException(create)
//        // to catch com.google.gson.JsonSyntaxException
//        return Optional.ofNullable(outEntity).orElseThrow(RuntimeException::new);
//    }
    @Override
    public AbstractEntity deserialize(JsonElement json, Type typeOfT,
                                      JsonDeserializationContext context) throws JsonParseException
    {
        AbstractEntity entity = null;
        JsonObject jsonObject = json.getAsJsonObject();
        if(jsonObject.get(OutEntity.Fields.entityFields.name()) != null) {
            String entityType = jsonObject.get(OutEntity.Fields.entityType.name()).getAsString();
            Set<Map.Entry<String, JsonElement>> fieldsSet = jsonObject.get(OutEntity.Fields.entityFields.name()).getAsJsonObject().entrySet();
            if(entityType.equals(EntityTypes.Event.name())) {
                EventDeserializer deserializer = (EventDeserializer) new DeserializerFabric().getDeserializer(entityType);
                Gson gson = new GsonBuilder()
                        .registerTypeAdapter(Event.class, deserializer)
                        .create();
                Event event = gson.fromJson(jsonObject.get(OutEntity.Fields.entityFields.name()), Event.class);
                //TODO И что дальше?
            }

            Map<String, Object> entityFields = new HashMap<>();
            for (Map.Entry<String, JsonElement> jE: fieldsSet) {
                Object objectInternal;
                if(jE.getValue() instanceof JsonObject &&
                        jE.getValue().getAsJsonObject().get(OutEntity.Fields.entityFields.name()) != null) {
                    objectInternal = recognizeOutEntity(jE.getValue().toString());
                } else {
                    objectInternal = recognizeObject(jE.getValue());
                }
                entityFields.put(jE.getKey(), objectInternal);
            }

        }
        //TODO Replace RuntimeException with OutEntityDeserializeException(create)
        // to catch com.google.gson.JsonSyntaxException
        return Optional.ofNullable(entity).orElseThrow(RuntimeException::new);
    }

    public OutEntity recognizeOutEntity (String jsonString) {
        Gson gson = new GsonBuilder()
                .registerTypeAdapter(OutEntity.class, new OutEntityDeserializer())
                .create();
        return gson.fromJson(jsonString, OutEntity.class);
    }

    public Object recognizeObject(JsonElement jsonString) {
        Gson gson = new Gson();
        return gson.fromJson(jsonString, Object.class);
    }

}
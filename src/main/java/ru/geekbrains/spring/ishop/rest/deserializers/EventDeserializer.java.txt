package ru.geekbrains.spring.ishop.rest.deserializers;

import com.google.gson.*;
import com.google.gson.reflect.TypeToken;
import org.springframework.stereotype.Component;
import ru.geekbrains.spring.ishop.entity.ActionType;
import ru.geekbrains.spring.ishop.entity.Event;
import ru.geekbrains.spring.ishop.rest.outentities.OutEntity;

import java.lang.reflect.Type;
import java.time.LocalDateTime;
import java.util.Map;

@Component
public class EventDeserializer implements JsonDeserializer<Event> {
    @Override
    public Event deserialize(JsonElement json, Type typeOfT,
                                JsonDeserializationContext context) throws JsonParseException
    {
        JsonObject jsonObject = json.getAsJsonObject();
        Map<String,Object> fields = context.deserialize(
                jsonObject.get(OutEntity.Fields.entityFields.name()),
                new TypeToken<Map<String, Object>>(){}.getType());
        return Event.builder()
                .id(context.deserialize((JsonElement) fields.get(Event.Fields.id.name()), Long.class))
                .actionType(context.deserialize((JsonElement) fields.get(Event.Fields.actionType.name()), ActionType.class))
                .issuer(context.deserialize((JsonElement) fields.get(Event.Fields.issuer.name()), String.class))
                .issuerEventId(context.deserialize((JsonElement) fields.get(Event.Fields.issuerEventId.name()), Long.class))
                .entityType(context.deserialize((JsonElement) fields.get(Event.Fields.entityType.name()), String.class))
                .entityId(context.deserialize((JsonElement) fields.get(Event.Fields.entityId.name()), Long.class))
                .issuerCreatedAt(context.deserialize((JsonElement) fields.get(Event.Fields.issuerCreatedAt.name()), LocalDateTime.class))
                .recipientAcceptedAt(context.deserialize((JsonElement) fields.get(Event.Fields.recipientAcceptedAt.name()), LocalDateTime.class))
                .build();
    }
}
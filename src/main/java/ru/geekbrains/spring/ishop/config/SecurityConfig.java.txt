package ru.geekbrains.spring.ishop.config;

import lombok.extern.slf4j.Slf4j;
import ru.geekbrains.spring.ishop.service.interfaces.IUserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.Arrays;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(securedEnabled = true)
@Slf4j
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    private IUserService userService;
    private CustomAuthenticationSuccessHandler customAuthenticationSuccessHandler;

    @Autowired
    public void setUserService(IUserService userService) {
        this.userService = userService;
    }

    @Autowired
    public void setCustomAuthenticationSuccessHandler(CustomAuthenticationSuccessHandler customAuthenticationSuccessHandler) {
        this.customAuthenticationSuccessHandler = customAuthenticationSuccessHandler;
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) {
        auth.authenticationProvider(authenticationProvider());
    }

    //TODO не работает ограничение в admin
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        //Added to fix the "status": 403, "error": "Forbidden" problem for PUT, POST etc. requests(REST). It helped!
        http.cors().and().csrf().disable();

        http.authorizeRequests()
                .antMatchers("/register/**").permitAll()
                .antMatchers("/admin/**").hasRole("EMPLOYEE")
                .antMatchers("/admin/user/**").hasRole("ADMIN")
                .antMatchers("/admin/user/reset/password/1/**").hasRole("SUPERADMIN")
                .antMatchers("/admin/user/edit/1/**").hasRole("SUPERADMIN")
                .antMatchers("/admin/user/1/**").hasRole("SUPERADMIN")
                .antMatchers("/admin/user/delete/1/**").hasRole("SUPERADMIN")
                .antMatchers("/profile/**").authenticated()
                .and()
                .formLogin()
                .loginPage("/login")
                .loginProcessingUrl("/authenticateTheUser")
                .successHandler(customAuthenticationSuccessHandler)
                .permitAll()
                .and()
                .logout()
                .logoutSuccessUrl("/")
                .permitAll();
    }

    @Bean
    public BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider auth = new DaoAuthenticationProvider();
        auth.setUserDetailsService(userService);
        auth.setPasswordEncoder(passwordEncoder());
        return auth;
    }

//    /** //does not work!
//     * Added to fix the "status": 403, "error": "Forbidden" problem for PUT, POST etc. requests(REST). It helped!
//     * source - https://stackoverflow.com/questions/50486314/how-to-solve-403-error-in-spring-boot-post-request
//     * @return -
//     */
//    @Bean
//    CorsConfigurationSource corsConfigurationSource() {
//        //Documentation https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/cors/CorsConfiguration.html
//        CorsConfiguration configuration = new CorsConfiguration();
//        //public void setAllowedOrigins(@Nullable List<String> allowedOrigins)
//        //Set the origins to allow, e.g. "https://domain1.com".
//        //The special value "*" allows all domains.
//        //By default this is not set.
//        configuration.setAllowedOrigins(Arrays.asList("*"));
//        //public void setAllowedMethods(@Nullable List<String> allowedMethods)
//        //Set the HTTP methods to allow, e.g. "GET", "POST", "PUT", etc.
//        //The special value "*" allows all methods.
//        //If not set, only "GET" and "HEAD" are allowed.
//        //By default this is not set.
//        //Note: CORS checks use values from "Forwarded" (RFC 7239), "X-Forwarded-Host", "X-Forwarded-Port", and "X-Forwarded-Proto" headers, if present, in order to reflect the client-originated address. Consider using the ForwardedHeaderFilter in order to choose from a central place whether to extract and use, or to discard such headers. See the Spring Framework reference for more on this filter.
//        configuration.setAllowedMethods(Arrays.asList("*"));
//        //public void setAllowedHeaders(@Nullable List<String> allowedHeaders)
//        //Set the list of headers that a pre-flight request can list as allowed for use during an actual request.
//        //The special value "*" allows actual requests to send any header.
//        //A header name is not required to be listed if it is one of: Cache-Control, Content-Language, Expires, Last-Modified, or Pragma.
//        //By default this is not set.
//        configuration.setAllowedHeaders(Arrays.asList("*"));
//        //public void setAllowCredentials(@Nullable Boolean allowCredentials)
//        //Whether user credentials are supported.
//        //By default this is not set (i.e. user credentials are not supported).
//        configuration.setAllowCredentials(true);
//        //Documentation - https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/cors/UrlBasedCorsConfigurationSource.html
//        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
//        //public void registerCorsConfiguration(String path, CorsConfiguration config)
//        //Register a CorsConfiguration for the specified path pattern.
////        source.registerCorsConfiguration("/**", configuration);
//
//        log.info("******** 1-source.registerCorsConfiguration.paths: " + source.getCorsConfigurations());
//        //2020-09-04 10:21:17.947  INFO 13360 --- [  restartedMain] r.g.spring.ishop.config.SecurityConfig   : ******** source.registerCorsConfiguration.paths: {}
//
//        source.registerCorsConfiguration("/api/**", configuration);
//        log.info("******** 1-source.registerCorsConfiguration.paths: " + source.getCorsConfigurations());
//        return source;
//    }

}
